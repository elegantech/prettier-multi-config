import { build, BuildConfig } from 'unbuild';
import { CommentBuilder, EMPTY_NEW_LINE } from './src/utils/comment-builder';

// Dev note: Do not use TypeScript aliases for importing modules (no compatible)
// console.log(EMPTY_NEW_LINE, 'Hola?');

const config: BuildConfig = {
  entries: [
    {
      input: 'src/configs/prettier.ts',
      name: '.prettierrc',
    },
    //
    // './src/.prettierrc'
  ],
  rollup: {
    dts: { tsconfig: '../tsconfig.internal.json' },
    inlineDependencies: true,
    output: {
      preserveModules: false,
      inlineDynamicImports: true,
      banner: (chunk: { facadeModuleId: string }): string => {
        const sourceModule = 'internal/src/' + chunk.facadeModuleId.split('/internal/src/')[1];

        const commentBlock: CommentBuilder = new CommentBuilder({ type: 'block', startSymbol: '!' });

        // const PRINT_WIDTH = 80;
        // const SEPARATOR = '// '.padEnd(PRINT_WIDTH, '*');

        // const messageHeader = '// * This module was auto-generated. DO NOT EDIT DIRECTLY. '.padEnd(PRINT_WIDTH - 1, ' ') + '*';

        commentBlock
          .add('WARNING: This file was auto-generated. DO NOT EDIT DIRECTLY.')
          .add('Edit the source file and run `npm run build:internal`.')
          .add(EMPTY_NEW_LINE)
          .add(`Source: '${sourceModule}'`);

        return commentBlock.toString();
      },
    },
    emitCJS: false,
  },
  declaration: false,
  alias: {
    '@/*': '../../src/*',
    '@internal/*': './src/*',
  },
  // rootDir: '.',
  clean: false,
  // outDir: '../../',
};

await build('internal', false, config);
